@*
// Copyright (c) 2010-2013 SharpDoc - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.       
// -------------------------------------------------------------------------------
// Override this template to modify the generated C# syntax of a member
// -------------------------------------------------------------------------------
*@
@model SharpDoc.TemplateContext
@using System.Text;
@using SharpDoc.Model

@functions {

    /// <summary>
    /// Dump the C# syntax of a type (class, interface, struct, enum)
    /// </summary>
    /// <param name="type"></param>
    /// <returns></returns>
    protected string DumpType(NType type) {
        var text = new StringBuilder();

        // Append attributes        
        foreach(var attribute in type.Attributes)
            text.Append("[").Append(attribute).Append("]").AppendLine();
        
        // Append visibility
        text.Append(type.VisibilityName).Append(" ");
        if (type.IsStatic) text.Append("static ");
        if (type.IsAbstract && !(type is NInterface)) text.Append("abstract ");
        if (type.IsFinal) text.Append("sealed ");

        // Append type (class, struct, interface, enum, delegate)
        text.Append(type.TypeName).Append(" ");

        var deleg = type as NDelegate;

		if (deleg != null)
        {
            text.Append(Escape(deleg.Invoke.ReturnType.Name));
            text.Append(" ");
        }

        // Append the name
        text.Append(Escape(type.Name));

		if (deleg != null)
        {
            DumpParameters(text, deleg.Invoke.Parameters);
        }

        bool hasBase = type is NClass && type.Bases.Count > 1;
        if (hasBase)
            text.Append(" : ").Append(Escape(type.Bases[0].Name));
        
        if (type.Interfaces.Count > 0) {
            if (!hasBase)
                text.Append(" : ");
            for(int i = 0; i < type.Interfaces.Count; i++) {
                if (i > 0 || hasBase)
                    text.Append(", ");
                text.Append(Escape(type.Interfaces[i].Name));                
            }
        }
        
        // TODO add generic constraints here
        
        return text.ToString();
    }

    /// <summary>
    /// Dump the C# syntax of a type property
    /// </summary>
    /// <param name="prop"></param>
    /// <returns></returns>
    protected string DumpProperty(NProperty prop)
    {
        var text = new StringBuilder();

        // Append visibility
        text.Append(prop.VisibilityFullName).Append(" ");
		
		// Append Type
        text.Append(prop.PropertyType.Name).Append(" ");

		// Append Name
		text.Append(prop.Name).Append(" { ");

		if (prop.HasGetMethod)
        {
			if (prop.Visibility != prop.GetMethod.Visibility)
                text.Append(prop.GetMethod.VisibilityName).Append(" ");
            text.Append("get;");
        }

		if (prop.HasSetMethod)
        {
			if (prop.HasGetMethod)
			    text.Append(" ");
			if (prop.Visibility != prop.SetMethod.Visibility)
                text.Append(prop.SetMethod.VisibilityName).Append(" ");
            text.Append("set;");
        }

        text.Append(" }").AppendLine();

        return text.ToString();
    }


    /// <summary>
    /// Dump the C# syntax of an event
    /// </summary>
    /// <param name="nEvent"></param>
    /// <returns></returns>
    protected string DumpEvent(NEvent nEvent)
    {
        var text = new StringBuilder();

        // Append visibility
        text.Append(nEvent.VisibilityFullName).Append(" ");

        // Append Type
        text.Append(Escape(nEvent.EventType.Name)).Append(" ");

        // Append Name
        text.Append(Escape(nEvent.Name));

        return text.ToString();
    }        

    /// <summary>
    /// Dump the C# syntax of a type property
    /// </summary>
    /// <param name="field"></param>
    /// <returns></returns>
    protected string DumpField(NField field)
    {
        var text = new StringBuilder();

        // Append visibility
        text.Append(field.VisibilityFullName).Append(" ");

        // Append the return type
	    text.Append(Escape(field.FieldType.Name)).Append(" ");
        
        // Append the name
        text.Append(Escape(field.Name));
		
        // TODO add generic constraints here

        return text.ToString();
    }    

    /// <summary>
    /// Dump the C# syntax of a type method
    /// </summary>
    /// <param name="method"></param>
    /// <returns></returns>
    protected string DumpMethod(NMethod method)
    {
        var text = new StringBuilder();

        // Append attributes        
        foreach (var attribute in method.Attributes)
            text.Append("[").Append(attribute).Append("]").AppendLine();

        // Append visibility
        text.Append(method.VisibilityFullName).Append(" ");

        // Append the return type
		if (!(method is NConstructor))
	        text.Append(Escape(method.ReturnType.Name)).Append(" ");
        
        // Append the name
        text.Append(Escape(method.Name));

        DumpParameters(text, method.Parameters);

        // TODO add generic constraints here

        return text.ToString();
    }    

    /// <summary>
    /// Dump the C# syntax of a type method
    /// </summary>
    /// <param name="method"></param>
    /// <returns></returns>
    protected void DumpParameters(StringBuilder text, List<NParameter> parameters)
    {
        text.Append("(");
        if (parameters.Count > 0)
        {
            text.AppendLine();
            for (int i = 0; i < parameters.Count; i++)
            {
                if (i > 0)
                    text.Append(", ").AppendLine();
                var parameter = parameters[i];
                text.Append("\t");
                text.Append(Escape(parameter.ParameterTypeName)).Append(" ").Append(Escape(parameter.Name));
            }
            text.AppendLine();
        }
        text.Append(")");
    }   
}

@helper Dump(NMember member)
{
    if (member is NType)
    {
        @DumpType((NType)member);
    } else if (member is NMethod)
    {
        @DumpMethod((NMethod)member);
    }
    else if (member is NEvent)
    {
        @DumpEvent((NEvent)member);
    }
	else if (member is NProperty)
    {
        @DumpProperty((NProperty)member);
    }
	else if (member is NField)
    {
        @DumpField((NField)member);
    }
}
